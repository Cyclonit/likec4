/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as WebcomponentSplatImport } from './routes/webcomponent.$'
import { Route as ViewViewIdImport } from './routes/view.$viewId'
import { Route as ExportViewIdImport } from './routes/export.$viewId'
import { Route as EmbedViewIdImport } from './routes/embed.$viewId'
import { Route as ViewViewIdIndexImport } from './routes/view.$viewId.index'
import { Route as ViewViewIdReactLegacyImport } from './routes/view.$viewId.react-legacy'
import { Route as ViewViewIdMmdImport } from './routes/view.$viewId.mmd'
import { Route as ViewViewIdEditorImport } from './routes/view.$viewId.editor'
import { Route as ViewViewIdDotImport } from './routes/view.$viewId.dot'
import { Route as ViewViewIdD2Import } from './routes/view.$viewId.d2'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WebcomponentSplatRoute = WebcomponentSplatImport.update({
  path: '/webcomponent/$',
  getParentRoute: () => rootRoute,
} as any)

const ViewViewIdRoute = ViewViewIdImport.update({
  path: '/view/$viewId',
  getParentRoute: () => rootRoute,
} as any)

const ExportViewIdRoute = ExportViewIdImport.update({
  path: '/export/$viewId',
  getParentRoute: () => rootRoute,
} as any)

const EmbedViewIdRoute = EmbedViewIdImport.update({
  path: '/embed/$viewId',
  getParentRoute: () => rootRoute,
} as any)

const ViewViewIdIndexRoute = ViewViewIdIndexImport.update({
  path: '/',
  getParentRoute: () => ViewViewIdRoute,
} as any)

const ViewViewIdReactLegacyRoute = ViewViewIdReactLegacyImport.update({
  path: '/react-legacy',
  getParentRoute: () => ViewViewIdRoute,
} as any)

const ViewViewIdMmdRoute = ViewViewIdMmdImport.update({
  path: '/mmd',
  getParentRoute: () => ViewViewIdRoute,
} as any)

const ViewViewIdEditorRoute = ViewViewIdEditorImport.update({
  path: '/editor',
  getParentRoute: () => ViewViewIdRoute,
} as any)

const ViewViewIdDotRoute = ViewViewIdDotImport.update({
  path: '/dot',
  getParentRoute: () => ViewViewIdRoute,
} as any)

const ViewViewIdD2Route = ViewViewIdD2Import.update({
  path: '/d2',
  getParentRoute: () => ViewViewIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/embed/$viewId': {
      id: '/embed/$viewId'
      path: '/embed/$viewId'
      fullPath: '/embed/$viewId'
      preLoaderRoute: typeof EmbedViewIdImport
      parentRoute: typeof rootRoute
    }
    '/export/$viewId': {
      id: '/export/$viewId'
      path: '/export/$viewId'
      fullPath: '/export/$viewId'
      preLoaderRoute: typeof ExportViewIdImport
      parentRoute: typeof rootRoute
    }
    '/view/$viewId': {
      id: '/view/$viewId'
      path: '/view/$viewId'
      fullPath: '/view/$viewId'
      preLoaderRoute: typeof ViewViewIdImport
      parentRoute: typeof rootRoute
    }
    '/webcomponent/$': {
      id: '/webcomponent/$'
      path: '/webcomponent/$'
      fullPath: '/webcomponent/$'
      preLoaderRoute: typeof WebcomponentSplatImport
      parentRoute: typeof rootRoute
    }
    '/view/$viewId/d2': {
      id: '/view/$viewId/d2'
      path: '/d2'
      fullPath: '/view/$viewId/d2'
      preLoaderRoute: typeof ViewViewIdD2Import
      parentRoute: typeof ViewViewIdImport
    }
    '/view/$viewId/dot': {
      id: '/view/$viewId/dot'
      path: '/dot'
      fullPath: '/view/$viewId/dot'
      preLoaderRoute: typeof ViewViewIdDotImport
      parentRoute: typeof ViewViewIdImport
    }
    '/view/$viewId/editor': {
      id: '/view/$viewId/editor'
      path: '/editor'
      fullPath: '/view/$viewId/editor'
      preLoaderRoute: typeof ViewViewIdEditorImport
      parentRoute: typeof ViewViewIdImport
    }
    '/view/$viewId/mmd': {
      id: '/view/$viewId/mmd'
      path: '/mmd'
      fullPath: '/view/$viewId/mmd'
      preLoaderRoute: typeof ViewViewIdMmdImport
      parentRoute: typeof ViewViewIdImport
    }
    '/view/$viewId/react-legacy': {
      id: '/view/$viewId/react-legacy'
      path: '/react-legacy'
      fullPath: '/view/$viewId/react-legacy'
      preLoaderRoute: typeof ViewViewIdReactLegacyImport
      parentRoute: typeof ViewViewIdImport
    }
    '/view/$viewId/': {
      id: '/view/$viewId/'
      path: '/'
      fullPath: '/view/$viewId/'
      preLoaderRoute: typeof ViewViewIdIndexImport
      parentRoute: typeof ViewViewIdImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  EmbedViewIdRoute,
  ExportViewIdRoute,
  ViewViewIdRoute: ViewViewIdRoute.addChildren({
    ViewViewIdD2Route,
    ViewViewIdDotRoute,
    ViewViewIdEditorRoute,
    ViewViewIdMmdRoute,
    ViewViewIdReactLegacyRoute,
    ViewViewIdIndexRoute,
  }),
  WebcomponentSplatRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/embed/$viewId",
        "/export/$viewId",
        "/view/$viewId",
        "/webcomponent/$"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/embed/$viewId": {
      "filePath": "embed.$viewId.tsx"
    },
    "/export/$viewId": {
      "filePath": "export.$viewId.tsx"
    },
    "/view/$viewId": {
      "filePath": "view.$viewId.tsx",
      "children": [
        "/view/$viewId/d2",
        "/view/$viewId/dot",
        "/view/$viewId/editor",
        "/view/$viewId/mmd",
        "/view/$viewId/react-legacy",
        "/view/$viewId/"
      ]
    },
    "/webcomponent/$": {
      "filePath": "webcomponent.$.tsx"
    },
    "/view/$viewId/d2": {
      "filePath": "view.$viewId.d2.tsx",
      "parent": "/view/$viewId"
    },
    "/view/$viewId/dot": {
      "filePath": "view.$viewId.dot.tsx",
      "parent": "/view/$viewId"
    },
    "/view/$viewId/editor": {
      "filePath": "view.$viewId.editor.tsx",
      "parent": "/view/$viewId"
    },
    "/view/$viewId/mmd": {
      "filePath": "view.$viewId.mmd.tsx",
      "parent": "/view/$viewId"
    },
    "/view/$viewId/react-legacy": {
      "filePath": "view.$viewId.react-legacy.tsx",
      "parent": "/view/$viewId"
    },
    "/view/$viewId/": {
      "filePath": "view.$viewId.index.tsx",
      "parent": "/view/$viewId"
    }
  }
}
ROUTE_MANIFEST_END */
