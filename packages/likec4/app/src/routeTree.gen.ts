/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ViewViewIdImport } from './routes/view.$viewId'
import { Route as ExportViewIdImport } from './routes/export.$viewId'
import { Route as EmbedViewIdImport } from './routes/embed.$viewId'
import { Route as ViewViewIdEditorImport } from './routes/view.$viewId.editor'

// Create Virtual Routes

const ViewViewIdReactLazyImport = createFileRoute('/view/$viewId/react')()
const ViewViewIdMmdLazyImport = createFileRoute('/view/$viewId/mmd')()
const ViewViewIdDotLazyImport = createFileRoute('/view/$viewId/dot')()
const ViewViewIdD2LazyImport = createFileRoute('/view/$viewId/d2')()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ViewViewIdRoute = ViewViewIdImport.update({
  path: '/view/$viewId',
  getParentRoute: () => rootRoute,
} as any)

const ExportViewIdRoute = ExportViewIdImport.update({
  path: '/export/$viewId',
  getParentRoute: () => rootRoute,
} as any)

const EmbedViewIdRoute = EmbedViewIdImport.update({
  path: '/embed/$viewId',
  getParentRoute: () => rootRoute,
} as any)

const ViewViewIdReactLazyRoute = ViewViewIdReactLazyImport.update({
  path: '/react',
  getParentRoute: () => ViewViewIdRoute,
} as any).lazy(() =>
  import('./routes/view.$viewId.react.lazy').then((d) => d.Route),
)

const ViewViewIdMmdLazyRoute = ViewViewIdMmdLazyImport.update({
  path: '/mmd',
  getParentRoute: () => ViewViewIdRoute,
} as any).lazy(() =>
  import('./routes/view.$viewId.mmd.lazy').then((d) => d.Route),
)

const ViewViewIdDotLazyRoute = ViewViewIdDotLazyImport.update({
  path: '/dot',
  getParentRoute: () => ViewViewIdRoute,
} as any).lazy(() =>
  import('./routes/view.$viewId.dot.lazy').then((d) => d.Route),
)

const ViewViewIdD2LazyRoute = ViewViewIdD2LazyImport.update({
  path: '/d2',
  getParentRoute: () => ViewViewIdRoute,
} as any).lazy(() =>
  import('./routes/view.$viewId.d2.lazy').then((d) => d.Route),
)

const ViewViewIdEditorRoute = ViewViewIdEditorImport.update({
  path: '/editor',
  getParentRoute: () => ViewViewIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/embed/$viewId': {
      preLoaderRoute: typeof EmbedViewIdImport
      parentRoute: typeof rootRoute
    }
    '/export/$viewId': {
      preLoaderRoute: typeof ExportViewIdImport
      parentRoute: typeof rootRoute
    }
    '/view/$viewId': {
      preLoaderRoute: typeof ViewViewIdImport
      parentRoute: typeof rootRoute
    }
    '/view/$viewId/editor': {
      preLoaderRoute: typeof ViewViewIdEditorImport
      parentRoute: typeof ViewViewIdImport
    }
    '/view/$viewId/d2': {
      preLoaderRoute: typeof ViewViewIdD2LazyImport
      parentRoute: typeof ViewViewIdImport
    }
    '/view/$viewId/dot': {
      preLoaderRoute: typeof ViewViewIdDotLazyImport
      parentRoute: typeof ViewViewIdImport
    }
    '/view/$viewId/mmd': {
      preLoaderRoute: typeof ViewViewIdMmdLazyImport
      parentRoute: typeof ViewViewIdImport
    }
    '/view/$viewId/react': {
      preLoaderRoute: typeof ViewViewIdReactLazyImport
      parentRoute: typeof ViewViewIdImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  EmbedViewIdRoute,
  ExportViewIdRoute,
  ViewViewIdRoute.addChildren([
    ViewViewIdEditorRoute,
    ViewViewIdD2LazyRoute,
    ViewViewIdDotLazyRoute,
    ViewViewIdMmdLazyRoute,
    ViewViewIdReactLazyRoute,
  ]),
])

/* prettier-ignore-end */
